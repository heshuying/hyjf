<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hyjf.mybatis.mapper.customize.admin.UsersCustomizeMapper">
	<resultMap id="UserInfoForLogMap" type="com.hyjf.mybatis.model.customize.admin.UserInfoForLogCustomize">
		<id column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="real_name" property="realName" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="idcard" property="idCard" jdbcType="VARCHAR" />
		<result column="user_role" property="userRole" jdbcType="INTEGER" />
		<result column="attribute" property="attribute" jdbcType="INTEGER" />
		<result column="open_account" property="openAccount" jdbcType="INTEGER" />
		<result column="bank_open_account" property="bankOpenAccount" jdbcType="INTEGER" />
		<result column="is51" property="is51" jdbcType="INTEGER" />
		<result column="user_status" property="userStatus" jdbcType="INTEGER" />
		<result column="recommend_name" property="recommendName" jdbcType="VARCHAR" />
		<result column="recommend_user_id" property="recommendUserId" jdbcType="INTEGER" />
		<result column="reg_time" property="regTime" jdbcType="INTEGER" />
		<result column="email" property="email" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="certOldUserMap" type="com.hyjf.mybatis.model.customize.CertSendUser">
		<id column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="username" property="username" jdbcType="CHAR" />
		<result column="mobile" property="mobile" jdbcType="CHAR" />
		<result column="email" property="email" jdbcType="CHAR" />
		<result column="password" property="password" jdbcType="CHAR" />
		<result column="paypassword" property="paypassword" jdbcType="CHAR" />
		<result column="referrer" property="referrer" jdbcType="INTEGER" />
		<result column="salt" property="salt" jdbcType="CHAR" />
		<result column="logintime" property="logintime" jdbcType="INTEGER" />
		<result column="reg_ip" property="regIp" jdbcType="CHAR" />
		<result column="reg_time" property="regTime" jdbcType="INTEGER" />
		<result column="login_ip" property="loginIp" jdbcType="CHAR" />
		<result column="login_time" property="loginTime" jdbcType="INTEGER" />
		<result column="last_ip" property="lastIp" jdbcType="CHAR" />
		<result column="last_time" property="lastTime" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="open_account" property="openAccount" jdbcType="TINYINT" />
		<result column="borrow_sms" property="borrowSms" jdbcType="INTEGER" />
		<result column="recharge_sms" property="rechargeSms" jdbcType="TINYINT" />
		<result column="withdraw_sms" property="withdrawSms" jdbcType="TINYINT" />
		<result column="is_smtp" property="isSmtp" jdbcType="TINYINT" />
		<result column="if_receive_notice" property="ifReceiveNotice" jdbcType="INTEGER" />
		<result column="iconUrl" property="iconurl" jdbcType="VARCHAR" />
		<result column="version" property="version" jdbcType="DECIMAL" />
		<result column="invest_sms" property="investSms" jdbcType="TINYINT" />
		<result column="recieve_sms" property="recieveSms" jdbcType="TINYINT" />
		<result column="reg_esb" property="regEsb" jdbcType="TINYINT" />
		<result column="eprovince" property="eprovince" jdbcType="VARCHAR" />
		<result column="send_sms" property="sendSms" jdbcType="TINYINT" />
		<result column="pid" property="pid" jdbcType="INTEGER" />
		<result column="usernamep" property="usernamep" jdbcType="VARCHAR" />
		<result column="is_inst_flag" property="isInstFlag" jdbcType="TINYINT" />
		<result column="inst_code" property="instCode" jdbcType="VARCHAR" />
		<result column="ptype" property="ptype" jdbcType="TINYINT" />
		<result column="account_esb" property="accountEsb" jdbcType="TINYINT" />
		<result column="referrer_user_name" property="referrerUserName" jdbcType="VARCHAR" />
		<result column="investFlag" property="investflag" jdbcType="TINYINT" />
		<result column="user_type" property="userType" jdbcType="TINYINT" />
		<result column="auth_type" property="authType" jdbcType="INTEGER" />
		<result column="auth_status" property="authStatus" jdbcType="INTEGER" />
		<result column="payment_auth_status" property="paymentAuthStatus" jdbcType="TINYINT" />
		<result column="auth_time" property="authTime" jdbcType="TIMESTAMP" />
		<result column="recod_total" property="recodTotal" jdbcType="INTEGER" />
		<result column="recod_time" property="recodTime" jdbcType="TIMESTAMP" />
		<result column="recod_truncate_time" property="recodTruncateTime" jdbcType="TIMESTAMP" />
		<result column="is_set_password" property="isSetPassword" jdbcType="TINYINT" />
		<result column="bank_open_account" property="bankOpenAccount" jdbcType="TINYINT" />
		<result column="bank_account_esb" property="bankAccountEsb" jdbcType="TINYINT" />
		<result column="is_data_update" property="isDataUpdate" jdbcType="TINYINT" />
		<result column="is_evaluation_flag" property="isEvaluationFlag" jdbcType="TINYINT" />
		<result column="evaluation_expired_time" property="evaluationExpiredTime" jdbcType="TIMESTAMP" />
		<result column="is_ca_flag" property="isCaFlag" jdbcType="TINYINT" />

		<result column="role_id" property="userAttr" jdbcType="INTEGER" />
		<result column="true_name" property="truename" jdbcType="VARCHAR" />
		<result column="idcard" property="userIdcard" jdbcType="VARCHAR" />
		<result column="account" property="userPayAccount" jdbcType="VARCHAR" />
		<result column="bank" property="userBank" jdbcType="VARCHAR" />
		<result column="card_no" property="userBankAccount" jdbcType="VARCHAR" />
		<result column="eval_type" property="evalType" jdbcType="VARCHAR" />

		<result column="cert_mobile" property="certMobile" jdbcType="VARCHAR" />
		<result column="hash_salt" property="hashSalt" jdbcType="VARCHAR" />
		<result column="phone_hash" property="phoneHash" jdbcType="VARCHAR" />
		<result column="group_by_date" property="groupByDate" jdbcType="VARCHAR" />

	</resultMap>

	<select id="selectUserByUserId" resultMap="UserInfoForLogMap" parameterType="java.lang.Integer">
			SELECT
				hydu.user_id,
				hydu.username AS user_name,
				hydui.truename AS real_name,
				hydu.mobile,
				hydui.role_id AS user_role,
				hydui.attribute,
				hydu.open_account,
				hydu.`status` AS user_status,
				hydui.is51,
				hydur.username AS recommend_name,
				hydur.user_id AS recommend_user_id,
				hydui.idcard,
				hydu.reg_time,
				<!--合规四期,添加邮箱-->
				hydu.email
			FROM
				huiyingdai_users hydu
				LEFT JOIN huiyingdai_users_info hydui ON hydu.user_id = hydui.user_id
				LEFT JOIN huiyingdai_spreads_users hydsu ON hydsu.user_id = hydu.user_id
				LEFT JOIN huiyingdai_users hydur ON hydur.user_id = hydsu.spreads_userid
		    WHERE hydu.user_id =#{userId,jdbcType=INTEGER}
	</select>
	
	
	
	
	<select id="selectInviteUserList" resultMap="UserInfoForLogMap" parameterType="map" >
			SELECT
				hydu.username AS user_name,
				hydu.open_account,
				hydu.reg_time,
				hydu.bank_open_account
			FROM
				huiyingdai_users hydu
		    WHERE hydu.referrer =#{referId,jdbcType=INTEGER}
			ORDER BY
				hydu.reg_time DESC
		<if test="limitStart != null and limitStart >= 0 and limitEnd !=null and limitEnd >= 0" >
    		LIMIT #{limitStart,jdbcType=INTEGER} , #{limitEnd,jdbcType=INTEGER}
    	</if>
	</select>
	
	<select id="selectInviteUserCount" resultType="java.lang.Integer"  parameterType="java.lang.Integer" >
			SELECT
				count(1)
			FROM
				huiyingdai_users hydu
		    WHERE hydu.referrer =#{referId,jdbcType=INTEGER} 
		
	</select>

	<select id="selectUserListByMobile" resultType="com.hyjf.mybatis.model.customize.UserVO" parameterType="list" >
		SELECT
		hydu.user_id AS userId,
		hydu.referrer AS referrer,
		hydu.mobile AS mobile
		FROM
		huiyingdai_users hydu
		WHERE  hydu.mobile in
		<foreach collection="list" item="item" index="index" open="("  separator="," close=")" >
			#{item}
		</foreach>
	</select>

    <!-- 0普通用户 1企业用户' -->
	<select id="selectUserCorpInfoByUserId" resultType="com.hyjf.mybatis.model.customize.bifa.BifaIndexUserInfoBean" parameterType="java.lang.Integer">
		select
		hu.user_id userId,
		CASE WHEN hu.user_type = 0 THEN hui.truename
		 WHEN hu.user_type = 1 THEN ''
		 ELSE '' END trueName,
		 CASE WHEN hu.user_type = 0 THEN hui.idcard
		 WHEN hu.user_type = 1 THEN hcoar.busi_code
		 ELSE '' END idCard,
		 FROM_UNIXTIME(hu.reg_time,'%Y-%m-%d') regDate
		  from huiyingdai_users hu
		  left join huiyingdai_users_info hui on hu.user_id = hui.user_id
		  left join hyjf_corp_open_account_record hcoar on hu.user_id = hcoar.user_id
		  where hu.user_id = #{userId,jdbcType=INTEGER}
	</select>

    <!-- 0普通用户 1企业用户' -->
	<select id="getBankOpenedAccountUsers" resultType="com.hyjf.mybatis.model.customize.bifa.BifaIndexUserInfoBean" parameterType="java.lang.Integer">
		SELECT
			hu.user_id userId,
			hui.truename trueName,
			hui.idcard idCard,
			FROM_UNIXTIME( hu.reg_time, '%Y-%m-%d' ) regDate
		FROM
			hyjf_bank_open_account hbo
			JOIN huiyingdai_users hu ON hbo.user_id = hu.user_id
			JOIN huiyingdai_users_info hui ON hbo.user_id = hui.user_id
		WHERE
			hbo.create_time BETWEEN from_unixtime( #{startDate} ) AND from_unixtime( #{endDate} )
			AND hu.bank_open_account = 1
			AND hu.user_type = 0
		UNION
		SELECT
			hu.user_id userId,
			"" trueName,
			hbo.busi_code idCard,
			FROM_UNIXTIME( hu.reg_time, '%Y-%m-%d' ) regDate
		FROM
			hyjf_corp_open_account_record hbo
			JOIN huiyingdai_users hu ON hbo.user_id = hu.user_id
		WHERE
			hbo.add_time BETWEEN from_unixtime( #{startDate} ) AND from_unixtime( #{endDate} )
			AND hu.bank_open_account = 1
			AND hu.user_type = 1
	</select>



	<!--查询未上报的数据  投资人-->
	<select id="selectCertUserNotSend" resultMap="certOldUserMap">
		SELECT
		  a.*, b.role_id role_id,
		  b.truename true_name,
		  b.idcard idcard,
		  c.account account,
		  d.bank bank,
		  d.card_no card_no,
		  e.type eval_type,
		  f.mobile cert_mobile,
		  f.salt hash_salt,
		  f.phoneHash phone_hash,
		  date_format(c.create_time,'%Y-%m') group_by_date
		FROM
		  huiyingdai_users a
		LEFT JOIN huiyingdai_users_info b ON a.user_id = b.user_id
		LEFT JOIN hyjf_bank_open_account c ON c.user_id = a.user_id
		LEFT JOIN hyjf_bank_card d ON d.user_id = a.user_id AND d. STATUS = 1
		LEFT JOIN huiyingdai_user_evalation_result e ON e.user_id = a.user_id
		LEFT JOIN ht_cert_mobile_hash f ON f.user_id = a.user_id

		WHERE
		  NOT EXISTS (
			SELECT
			  user_id
			FROM
			  ht_cert_user c
			WHERE
			  c.user_id = a.user_id
		  ) and  b.role_id = 1
		AND a.bank_open_account = 1
		AND a.user_type = 0
		AND a.`status` = 0
		ORDER BY c.create_time asc
		LIMIT 0,3000
	</select>

	<!--查询未上报的数据  投资人 数量-->
	<select id="getCertUserNotSendCount" resultType="java.lang.Integer">
		SELECT
		count(0)
		FROM
		huiyingdai_users a
		LEFT JOIN huiyingdai_users_info b on a.user_id = b.user_id
		LEFT JOIN ht_cert_user c on c.user_id = a.user_id
		where b.role_id = 1 and a.bank_open_account=1 and a.user_type=0 and a.`status`=0
	</select>

	<!--查询需要上报的用户信息-->
	<select id="getCertSendUserByUserId" resultMap="certOldUserMap">
		SELECT
		DISTINCT
		  a.*, b.role_id role_id,
		  b.truename true_name,
		  b.idcard idcard,
		  c.account account,
		  d.bank bank,
		  d.card_no card_no,
		  e.type eval_type,
		  f.mobile cert_mobile,
		  f.salt hash_salt,
		  f.phoneHash phone_hash
		FROM
		  huiyingdai_users a
		LEFT JOIN huiyingdai_users_info b ON a.user_id = b.user_id
		LEFT JOIN hyjf_bank_open_account c ON c.user_id = a.user_id
		LEFT JOIN hyjf_bank_card d ON d.user_id = a.user_id AND d. STATUS = 1
		LEFT JOIN huiyingdai_user_evalation_result e ON e.user_id = a.user_id
		LEFT JOIN ht_cert_mobile_hash f ON f.user_id = a.user_id

		WHERE
		a.user_id = #{userId} and
		   a.bank_open_account = 1
		AND a.`status` = 0
	</select>

	<!--批量插入上报用户表-->
	<insert id="insertCertUserByList" parameterType="java.util.List" >
		insert into ht_cert_user (log_ord_id, user_id, user_name,
		user_id_card_hash, hash_value, borrow_nid,
		create_time, update_time)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.logOrdId,jdbcType=VARCHAR}, #{item.userId,jdbcType=INTEGER}, #{item.userName,jdbcType=VARCHAR},
			#{item.userIdCardHash,jdbcType=VARCHAR}, #{item.hashValue,jdbcType=VARCHAR}, #{item.borrowNid,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP})
		</foreach>
	</insert>
	<!--批量插入上报用户表-->
	<insert id="insertCertUserTransactByList" parameterType="java.util.List" >
		insert IGNORE into ht_cert_user_transact (user_id, create_time) values
		<foreach collection="list" item="item" separator=",">
		( #{item.userId,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP})
		</foreach>
	</insert>

	<!--查询未进行哈希的用户-->
	<select id="getNotHashUsers" resultType="com.hyjf.mybatis.model.auto.Users">
		SELECT
			user_id userId,
			mobile
		FROM
			users.huiyingdai_users a
		WHERE
			NOT EXISTS (
				SELECT
					user_id
				FROM
					ht_cert_mobile_hash b
				WHERE
					b.user_id = a.user_id
			)
			and a.mobile is not null
			and LENGTH(mobile)=11
			order by user_id asc
		LIMIT 0,2000
	</select>

	<!--批量插入手机号哈希值-->
	<insert id="insertMobileHashBatch" parameterType="java.util.List" >
		insert into ht_cert_mobile_hash (user_id, mobile, salt,phoneHash) values
		<foreach collection="list" item="item" separator=",">
		(#{item.userId,jdbcType=INTEGER}, #{item.mobile,jdbcType=VARCHAR}, #{item.salt,jdbcType=VARCHAR},
		#{item.phonehash,jdbcType=VARCHAR})
		</foreach>
	</insert>

</mapper>
