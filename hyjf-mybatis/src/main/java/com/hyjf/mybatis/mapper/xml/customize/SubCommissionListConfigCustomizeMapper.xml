<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hyjf.mybatis.mapper.customize.SubCommissionListConfigCustomizeMapper" >
  <resultMap id="BaseResultMap" type="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="truename" property="truename" jdbcType="CHAR" />
    <result column="username" property="username" jdbcType="CHAR" />
    <result column="role_name" property="roleName" jdbcType="CHAR" />
    <result column="user_type" property="userType" jdbcType="CHAR" />
    <result column="bank_open_account" property="bankOpenAccount" jdbcType="CHAR" />
    <result column="account" property="account" jdbcType="CHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="cooperate_num" property="cooperateNum" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="create_user_name" property="createUserName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
    <result column="update_user_id" property="updateUserId" jdbcType="INTEGER" />
    <result column="update_user_name" property="updateUserName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Where_Clause">
		<where>
		    
			<!--  -->
			<if test="userNameSrch != null and userNameSrch != ''">
				AND c.username LIKE CONCAT('%', #{userNameSrch}, '%')
			</if>
			<if test="trueNameSrch != null and trueNameSrch != ''">
				AND c.truename LIKE CONCAT('%', #{trueNameSrch}, '%')
			</if>
			<if test="roleNameSrch != null and roleNameSrch != ''">
				AND c.role_name = #{roleNameSrch}
			</if>
			<!--  -->
			<if test="userTypeSrch != null and userTypeSrch != ''">
				AND c.user_type = #{userTypeSrch}
			</if>
			<if test="accountSrch != null and accountSrch != ''">
				AND c.account LIKE CONCAT('%', #{accountSrch}, '%')
			</if>
			<if test="statusSrch != null and statusSrch != ''">
				AND c.status = #{statusSrch}
			</if>
			<!-- 时间 -->
			<if test="recieveTimeStartSrch != null and recieveTimeStartSrch != ''">
				AND FROM_UNIXTIME( c.create_time, '%Y-%m-%d' ) <![CDATA[>=]]> #{recieveTimeStartSrch}
			</if>
			<if test="recieveTimeEndSrch != null and recieveTimeEndSrch != ''">
				AND FROM_UNIXTIME( c.create_time, '%Y-%m-%d' ) <![CDATA[<=]]> #{recieveTimeEndSrch}
			</if>
			
		</where>
	</sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterionsubco" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List" >
    id, user_id, username,truename, role_name, user_type, bank_open_account, account, `status`, cooperate_num,
    remark, create_user_id, create_user_name, create_time, update_user_id, update_user_name
  </sql>
  <!-- 获取列表 -->
  <select id="getRecordList" resultMap="BaseResultMap" parameterType="Map" >
    select
    <if test="distinct" >
      distinct
    </if>
    id, user_id, username, truename,role_name, user_type, bank_open_account, account, `status`, cooperate_num,
    remark, create_user_id, create_user_name, 
    FROM_UNIXTIME( c.create_time, '%Y-%m-%d %H:%i:%s' ) create_time, update_user_id, update_user_name
    from hyjf_sub_commission_list_config c 
    <include refid="Where_Clause" />
    ORDER BY create_time DESC
    <if test="limitStart >= 0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="getSimpleList" resultMap="BaseResultMap" parameterType="Map" >
    select distinct username, truename, account
    from hyjf_sub_commission_list_config c where status=0
    ORDER BY create_time DESC
  </select>
  <select id="getRecordCount" resultType="java.lang.Integer" parameterType="Map">
		SELECT
		  COUNT(*)
		FROM hyjf_sub_commission_list_config c
		<include refid="Where_Clause" />
	</select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomizeExample" >
    select
    <include refid="Base_Column_List" />
    from hyjf_sub_commission_list_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart >= 0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByExampleUsername" resultMap="BaseResultMap" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    select
    <include refid="Base_Column_List" />
    from hyjf_sub_commission_list_config
    WHERE 1=1
      <if test="username != null" >
		and username = #{username,jdbcType=CHAR}
	  </if>
  </select>
  <select id="selectByNameExample" resultMap="BaseResultMap" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomizeExample" >
    select
      distinct username usernamep,user_id, username, role_name, user_type, bank_open_account, account, `status`, 
    remark, create_user_id, create_user_name, create_time, update_user_id, update_user_name
    from hyjf_sub_commission_list_config where status=0
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from hyjf_sub_commission_list_config
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomizeExample" >
    delete from hyjf_sub_commission_list_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into hyjf_sub_commission_list_config (user_id, username,truename, role_name, 
      user_type, bank_open_account, account, 
      `status`, cooperate_num, remark, create_user_id,
      create_user_name, create_time, update_user_id, 
      update_user_name)
    values (#{userId,jdbcType=INTEGER}, #{username,jdbcType=CHAR},#{truename,jdbcType=CHAR}, #{roleName,jdbcType=CHAR}, 
      #{userType,jdbcType=CHAR}, #{bankOpenAccount,jdbcType=CHAR}, #{account,jdbcType=CHAR}, 
      #{status,jdbcType=TINYINT},#{cooperateNum,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{createUserId,jdbcType=INTEGER},
      #{createUserName,jdbcType=VARCHAR}, #{createTime,jdbcType=VARCHAR}, #{updateUserId,jdbcType=INTEGER}, 
      #{updateUserName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into hyjf_sub_commission_list_config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="truename != null" >
        truename,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="userType != null" >
        user_type,
      </if>
      <if test="bankOpenAccount != null" >
        bank_open_account,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="cooperateNum != null" >
        cooperate_num,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="createUserName != null" >
        create_user_name,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUserId != null" >
        update_user_id,
      </if>
      <if test="updateUserName != null" >
        update_user_name,
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomizeExample" resultType="java.lang.Integer" >
    select count(*) from hyjf_sub_commission_list_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update hyjf_sub_commission_list_config
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.username != null" >
        username = #{record.username,jdbcType=CHAR},
      </if>
      <if test="record.truename != null" >
        truename = #{record.truename,jdbcType=CHAR},
      </if>
      <if test="record.roleName != null" >
        role_name = #{record.roleName,jdbcType=CHAR},
      </if>
      <if test="record.userType != null" >
        user_type = #{record.userType,jdbcType=CHAR},
      </if>
      <if test="record.bankOpenAccount != null" >
        bank_open_account = #{record.bankOpenAccount,jdbcType=CHAR},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=CHAR},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.cooperateNum != null" >
        cooperate_num = #{record.cooperateNum,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.createUserName != null" >
        create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUserId != null" >
        update_user_id = #{record.updateUserId,jdbcType=INTEGER},
      </if>
      <if test="record.updateUserName != null" >
        update_user_name = #{record.updateUserName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update hyjf_sub_commission_list_config
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      username = #{record.username,jdbcType=CHAR},
      truename = #{record.truename,jdbcType=CHAR},
      role_name = #{record.roleName,jdbcType=CHAR},
      user_type = #{record.userType,jdbcType=CHAR},
      bank_open_account = #{record.bankOpenAccount,jdbcType=CHAR},
      account = #{record.account,jdbcType=CHAR},
      `status` = #{record.status,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      update_user_id = #{record.updateUserId,jdbcType=INTEGER},
      update_user_name = #{record.updateUserName,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    update hyjf_sub_commission_list_config
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=CHAR},
      </if>
      <if test="truename != null" >
        truename = #{truename,jdbcType=CHAR},
      </if>
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=CHAR},
      </if>
      <if test="userType != null" >
        user_type = #{userType,jdbcType=CHAR},
      </if>
      <if test="bankOpenAccount != null" >
        bank_open_account = #{bankOpenAccount,jdbcType=CHAR},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=CHAR},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="cooperateNum != null" >
        cooperate_num = #{cooperateNum,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUserName != null" >
        create_user_name = #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="updateUserId != null" >
        update_user_id = #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserName != null" >
        update_user_name = #{updateUserName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hyjf.mybatis.model.customize.SubCommissionListConfigCustomize" >
    update hyjf_sub_commission_list_config
    set user_id = #{userId,jdbcType=INTEGER},
      username = #{username,jdbcType=CHAR},
      truename = #{truename,jdbcType=CHAR},
      role_name = #{roleName,jdbcType=CHAR},
      user_type = #{userType,jdbcType=CHAR},
      bank_open_account = #{bankOpenAccount,jdbcType=CHAR},
      account = #{account,jdbcType=CHAR},
      `status` = #{status,jdbcType=TINYINT},
      cooperate_num = #{cooperateNum,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      create_user_name = #{createUserName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      update_user_id = #{updateUserId,jdbcType=INTEGER},
      update_user_name = #{updateUserName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUserInfo" parameterType="String" resultType="Map" >
    SELECT
		users.user_id,
		users.status,
		userinfo.truename,
		userinfo.role_id,
		CASE userinfo.role_id
	WHEN '1' THEN
		'出借人'
	WHEN '2' THEN
		'借款人'
	WHEN ' 3 ' THEN
		' 垫付机构'
	END AS roleId,
	 users.user_type,
	 CASE users.user_type
	WHEN '0' THEN
		'个人用户'
	WHEN '1' THEN
		'企业用户'
	END AS userType,
    <!-- 当用户角色为借款人时，才调取其用户的合作机构编号；出借人则不调取且不显示该字段 start-->
    CASE userinfo.role_id
    WHEN '2' THEN
    users.inst_code
    END AS cooperateNum,
    <!-- 合作机构编号 end -->
	 users.bank_open_account,
	 CASE users.bank_open_account
	WHEN ' 0 ' THEN
		' 未开户 '
	WHEN ' 1 ' THEN
		' 已开户'
	END AS OPEN,
	 hboa.account
	FROM
		huiyingdai_users users LEFT JOIN huiyingdai_users_info userinfo ON (users.user_id=userinfo.user_id)
							   LEFT JOIN hyjf_bank_open_account hboa ON (users.user_id=hboa.user_id)
	WHERE 
		users.username = #{username,jdbcType=CHAR}
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    id, user_id, username, truename,
     <!-- CASE role_name
	WHEN '1' THEN
		'出借人'
	WHEN '2' THEN
		'借款人'
	WHEN ' 3 ' THEN
		' 垫付机构'
	END AS  -->
	 role_name, 
     user_type, 
     bank_open_account,
     account, `status`, cooperate_num,
    remark, create_user_id, create_user_name, create_time, update_user_id, update_user_name
    from hyjf_sub_commission_list_config
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="getUserIdInfo" parameterType="Integer" resultType="Map" >
  		SELECT info.user_id,hboa.account,info.truename FROM huiyingdai_users_info info 
		INNER JOIN hyjf_bank_open_account hboa ON (info.user_id=hboa.user_id)
		 WHERE info.user_id=#{userId,jdbcType=INTEGER}
  	</select>
</mapper>